package org.mingy.kernel.orm;import java.io.Serializable;import java.util.List;import org.mingy.kernel.bean.IEntity;/** * 对简单对象映射操作的DAO接口定义<br> * 此接口应该可以解决实际应用中的大部分（80%以上）的O-R映射过程中的DAO代码实现。<br> * 其具体实现可以是DAO实现，也可以是JPA实现，如果可能，甚至是其他类型的实现。 *  * @author Mingy */public interface ICommonDao {	/**	 * 通过O-R映射在数据库中删除指定的对象	 * 	 * @param clazz	 *            数据对象类	 * @param key	 *            关键字	 */	public <T extends IEntity> void delete(Class<T> clazz, Serializable key);	/**	 * 通过O-R映射在数据库中删除指定的对象	 * 	 * @param obj	 *            将要被删除的数据对象	 * @throws DaoException	 */	public <T extends IEntity> void delete(T obj);	/**	 * 通过O-R映射在数据库中删除指定数据对象类的所有数据对象	 * 	 * @param cls	 *            数据对象类	 * @throws DaoException	 */	public <T extends IEntity> void deleteAll(Class<T> cls);	/**	 * 通过O-R映射获取数据库中指定数据对象类的所有数据对象	 * 	 * @param cls	 *            数据对象类	 * @return 数据对象列表	 * @throws DaoException	 */	public <T extends IEntity> List<T> findAll(Class<T> cls);	/**	 * 通过O-R映射在数据库中获取指定数据对象类和关键字的数据对象	 * 	 * @param cls	 *            数据对象类	 * @param key	 *            关键字	 * @return 指定关键字的数据对象，如果数据库中不存在该对象，则返回null。	 * @throws DaoException	 */	public <T extends IEntity> T findByKey(Class<T> cls, Serializable key);	/**	 * 通过O-R映射在数据库中插入指定的数据对象	 * 	 * @param obj	 *            将被插入的数据对象	 * @throws DaoException	 */	public <T extends IEntity> void insert(T obj);	/**	 * 通过O-R映射在数据库中更新指定的数据对象	 * 	 * @param obj	 *            将被更新的数据对象	 * @throws DaoException	 */	public <T extends IEntity> void update(T obj);	/**	 * 通过指定的select语句进行数据查询，该语句可以是命名查询，也可以是非命名查询；可是JPQL， 也可以是Native SQL。<br>	 * 注意：在Hibernate中不支持命名查询的NativeSQL。	 * 	 * @param ql	 *            指定的语句，如果是命名查询，则为命名查询的ID。	 * @param params	 *            指定语句的附加参数，可以是：Object[], List<String>, Map<String, Object>。	 * @param isNamedQuery	 *            如果设置为true，表示为命名查询，否则为非命名查询。	 * @param isNativeQuery	 *            如果设置为true，表示为Native SQL语句，否则为JPQL语句。	 * @param firstResult	 *            数据查询的起始位置，如果设置为小于0的数值，则被忽略。	 * @param maxResults	 *            数据查询的最大记录行数，如果设置为小于0的数值，则被忽略。	 * @return 返回查询的记录结果列表	 */	@SuppressWarnings("rawtypes")	public List query(final String ql, final Object params,			final boolean isNamedQuery, final boolean isNativeQuery,			final int firstResult, final int maxResults);	/**	 * 通过指定的update或者delete语句进行数据操作（数据更新或者数据删除），该语句可以是命名查询，也可以是非命名查询；可是JPQL，	 * 也可以是Native SQL。	 * 	 * @param ql	 *            指定的语句，如果是命名查询，则为命名查询的ID。	 * @param params	 *            指定语句的附加参数，可以是：Object[], List<String>, Map<String, Object>。	 * @param isNamedQuery	 *            如果设置为true，表示为命名查询，否则为非命名查询。	 * @param isNativeQuery	 *            如果设置为true，表示为Native SQL语句，否则为JPQL语句。	 * @return 成功执行后影响的数据行数	 */	public long updateByQuery(final String ql, final Object params,			final boolean isNamedQuery, final boolean isNativeQuery);}