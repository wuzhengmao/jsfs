package org.mingy.kernel.context;import org.mingy.kernel.util.Strings;import org.springframework.beans.factory.DisposableBean;import org.springframework.beans.factory.InitializingBean;import org.springframework.util.Log4jConfigurer;/** * 通过spring来初始化Log4J，由spring在加载过程中进行自动加载。<br> * 如果定义了log4jRefreshInterval，则还可以实现定义扫描log4j的配置更改。<br> * <br> * 要使用本功能，需要在spring的加载配置文件（applicationContext-XXXX.xml）中进行如下配置：<br> * &lt;bean class="org.mx.kernel.context.Log4jConfigureContext"><br> * &nbsp;&nbsp;&nbsp;&nbsp;&lt;property name="log4jConfigLocation" * value="${logs.root}/log4j.xml" /><br> * &nbsp;&nbsp;&nbsp;&nbsp;&lt;property name="log4jRefreshInterval" value="3600" * /><br> * &lt/bean> *  * @author Mingy *  */public class Log4jConfigureContext implements InitializingBean, DisposableBean {	private String log4jConfigLocation = "log4j.xml";	private long log4jRefreshInterval = 0;	private boolean closeWithContainer = true;	/**	 * 预处理参数中的变量，如果有的话。	 */	protected void prepareParameters() {		log4jConfigLocation = Strings.fillVariable(log4jConfigLocation);	}	/*	 * (non-Javadoc)	 * 	 * @see	 * org.springframework.beans.factory.InitializingBean#afterPropertiesSet()	 */	public void afterPropertiesSet() throws Exception {		prepareParameters();		if (log4jRefreshInterval > 0) {			Log4jConfigurer.initLogging(log4jConfigLocation,					log4jRefreshInterval);		} else {			Log4jConfigurer.initLogging(log4jConfigLocation);		}	}	/*	 * (non-Javadoc)	 * 	 * @see org.springframework.beans.factory.DisposableBean#destroy()	 */	public void destroy() throws Exception {		if (closeWithContainer)			Log4jConfigurer.shutdownLogging();	}	/**	 * 注入log4j的配置文件，可以使properties或者xml的文件。	 * 	 * @param log4jConfigLocation	 *            配置文件路径，可以包含路径变量，如果设置了的话。	 */	public void setLog4jConfigLocation(String log4jConfigLocation) {		this.log4jConfigLocation = log4jConfigLocation;	}	/**	 * 注入的周期性载入等待时间，单位为秒。	 * 	 * @param delay	 *            等待时间，如果设置为小于等于0的值，则表示不周期性载入，仅载入一次。	 */	public void setLog4jRefreshInterval(long delay) {		this.log4jRefreshInterval = delay * 1000;	}	/**	 * 设定log4J是否随IoC容器关闭。	 * 	 * @param closeWithContainer	 *            true为随容器关闭	 */	public void setCloseWithContainer(boolean closeWithContainer) {		this.closeWithContainer = closeWithContainer;	}}