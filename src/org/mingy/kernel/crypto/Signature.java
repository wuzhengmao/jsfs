package org.mingy.kernel.crypto;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;/** * 使用消息摘要的方式进行摘要编码的应用类 *  * @author Mingy * @see Base64 */public class Signature {	// 被支持的摘要算法列表	protected static final String[] algorithms = { "MD5", "SHA", "SHA-1" };	/**	 * 使用指定的消息摘要算法，对输入的数据进行摘要编码，并对摘要编码结果进行Base64编码转换。	 * 	 * @param algorithm	 *            指定的摘要算法，必须在支持的摘要算法之中。	 * @param input	 *            输入的待处理的字节数组	 * @return 经过处理后输出摘要消息	 * @throws NullPointerException	 *             如果输入的字节数组为null，则抛出此异常。	 * @throws NoSuchAlgorithmException	 *             如果指定的摘要算法不被支持，则抛出此异常。	 * @see #digestBase64(String, byte[])	 */	public static String digest(String algorithm, byte[] input)			throws NullPointerException, NoSuchAlgorithmException {		return digestBase64(algorithm, input);	}	/**	 * 使用指定的消息摘要算法，对输入的数据进行摘要编码，并对摘要编码结果进行Base64编码转换。	 * 	 * @param algorithm	 *            指定的摘要算法，必须在支持的摘要算法之中。	 * @param input	 *            输入的待处理的字节数组	 * @return 经过处理后输出摘要消息	 * @throws NullPointerException	 *             如果输入的字节数组为null，则抛出此异常。	 * @throws NoSuchAlgorithmException	 *             如果指定的摘要算法不被支持，则抛出此异常。	 * @see Base64#encode(byte[])	 */	public static String digestBase64(String algorithm, byte[] input)			throws NullPointerException, NoSuchAlgorithmException {		if (input == null) {			throw new NullPointerException();		}		if (!isSupported(algorithm)) {			throw new NoSuchAlgorithmException();		}		MessageDigest md = MessageDigest.getInstance(algorithm);		byte[] ret = md.digest(input);		return new String(Base64.encode(ret));	}	/**	 * 使用指定的消息摘要算法，对输入的数据进行摘要编码，并对摘要编码结果进行十六进制表示转换。	 * 	 * @param algorithm	 *            指定的摘要算法，必须在支持的摘要算法之中。	 * @param input	 *            输入的待处理的字节数组	 * @return 经过处理后输出摘要消息	 * @throws NullPointerException	 *             如果输入的字节数组为null，则抛出此异常。	 * @throws NoSuchAlgorithmException	 *             如果指定的摘要算法不被支持，则抛出此异常。	 * @see MathUtil#byteToHexString(byte[])	 */	public static String digestHex(String algorithm, byte[] input)			throws NullPointerException, NoSuchAlgorithmException {		if (input == null) {			throw new NullPointerException();		}		if (!isSupported(algorithm)) {			throw new NoSuchAlgorithmException();		}		MessageDigest md = MessageDigest.getInstance(algorithm);		byte[] ret = md.digest(input);		return byteToHexString(ret);	}	private static String byteToHexString(byte[] bytes) {		StringBuffer sb = new StringBuffer();		for (int i = 0; i < bytes.length; i++) {			sb.append(byteToHexString(bytes[i]));		}		return sb.toString();	}	private static String byteToHexString(byte b) {		String hex = Integer.toHexString(b);		switch (hex.length()) {		case 0:			return "00";		case 1:			return "0" + hex;		case 2:			return hex;		default:			return hex.substring(hex.length() - 2);		}	}	/**	 * 返回支持的摘要算法	 * 	 * @return 摘要算法数组	 */	public static String[] getSupportAlgorithms() {		return algorithms;	}	/**	 * 判断输入的摘要算法是否被支持	 * 	 * @param algorithm	 *            带判断的摘要算法	 * @return 如果被支持，则返回true，否则返回false。	 */	public static boolean isSupported(String algorithm) {		if (algorithm == null) {			return false;		}		algorithm = algorithm.toUpperCase();		String[] supports = getSupportAlgorithms();		for (int i = 0; i < supports.length; i++) {			if (supports[i].equals(algorithm)) {				return true;			}		}		return false;	}}